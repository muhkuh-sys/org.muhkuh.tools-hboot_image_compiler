v.0.1.0
  * Add default value for alias "headeraddress_extflash"

v0.0.14

  * Added the option -a/--append-file to append the contents of an arbirary file 
    (e.g. Bootwsitch) at the end of the image.

  * Add Bootswitch v1.0.2 binary.

  * Prevent generation of empty data chunks.
    Exit with an error when the content of a data chunk is empty.
    Print a message when the segments extracted from an ELF file
    for a data chunk are empty.

  * Use nxt_version.py and maker.py for versioning and distributing.
  
  * API changes 
	Compiler COM:
	-------------
    - added argument '-nt' to '--netx-type-public'
	- the following arguments are now for advanced mode only:
		- '-n', '--netx-type'
		- '-d', '--objdump' (Windows uses included version, Linux uses OS-default version)
		- '-r', '--readelf' (Windows uses included version, Linux uses OS-default version)
		- '-c', '--objcopy' (Windows uses included version, Linux uses OS-default version)
		- '-k', '--keyrom'
		- '-p', '--patch-table'
		- '--openssl-rand-off'
		- '-D', '--define'
		- '-I', '--include'
		- '-S', '--sniplib'
		- '--openssl-exe'
		- '--openssl-options'
	- renamed '-V', '--verbose' (was '-v', '--verbose')
	- renamed '-v', '--version' (was '-V', '--version')
	- added argument '-t', '--template-layout' : provides template layout for HWC and MWC images
	
	Compiler APP:
	-------------
	- renamed '-V', '--verbose' (was '-v', '--verbose')
	- renamed '-v', '--version' (was '-V', '--version')
	- added argument '-nt', '--netx-type-public'
	- the following arguments are now for advanced mode only:
		- '-n', '--netx-type'
		- '-d', '--objdump' (Windows uses included version, Linux uses OS-default version)
		- '-r', '--readelf' (Windows uses included version, Linux uses OS-default version)
		- '-c', '--objcopy' (Windows uses included version, Linux uses OS-default version)
		- '-k', '--keyrom'
		- '-p', '--patch-table'
		- '--openssl-rand-off'
		- '-D', '--define'
		- '-I', '--include'
		- '-S', '--sniplib'
		- '--openssl-exe'
		- '--openssl-options'
	- added argument '-t', '--template-layout' : provides template layout for NAI and NEA images
	- argument '-s', '--sdram_split_offset' now only accepts supported options as offset.
	
  * Added objcopy, objdump and readelf to the windows-distributions.
      -> Linux-distribution expects the tools to be pre-installed
     

  * Add attribute 'do_not_lock_system_cfg' to EXEC chunk. 

    If true, the flags are or'ed with 0x00000400.
    This flag will suppress the locking of the system configuration which 
    normally occurs automatically when an exec chunk is processed and the 
    attribute is not present, or false.

  * Changed the chip type NETX90C to NETX90D since NETX90C became an internal
    version for the netx90_rev1 with the new PHY.

  * mbs subrepo was removed from the repository --> now the hboot image compiler sources
    are integrated as a subrepo directly

  * tests can be executed woithout mbs easily since the global environment variables are set automatically

  * now we can build executables and a python package for installation

v0.0.13

  * Add the chip type NETX90C/netx90_rev2 and its patch table.
  
  * Add the attributes 'min_size' and 'min_size_fill_value' to the HBootImage 
    tag, which allow specifying a minimum size for the generated boot image. 
    If the size of the image is smaller, it is padded to the minimum size. 
    If 'min_size_fill_value' is specified with a 32-bit value, this value is 
    used for padding, otherwise 0xffffffff is used.

  * Add the attribute 'max_size' to the HBootImage tag, which allows 
    specifying a maximum size for the generated boot image. 
    If the size of the image exceeds the maximum size, an error is raised.

  * Support creating signed APP images for netX 90 rev. 1 and 2
    (using the attribute "signed_binding" in the ASIG chunk).

  * Add the secure copy/SCPY chunk for netx 90 Rev. 0 and Rev. 1 (and later)

  * netx90_app_iflash_image.py is deprecated, use netx90_app_image.py instead.

  * Allow SkipIncomplete into hash table

  * Allow RAW option data to be larger than 255 bytes.

  * Allow reading the contents of an option chunk from a binary file.
    (Only tested with RAW options)

  * Issue a warning if the key index in a HTBL chunk is not 17, or if the key index in an USIP chunk is greater than 17 (and not 0xff).

  * Add command --version.

  * Add license text (GPL v2).
  
Features supported only by the netx90 Rev. 2:

  * Correct next header address in APP images located in Intflash2. (allows multi-part images in Intflash2)

  * Support HTBL chunks with filler data 

  * Exclude the filler data in a HTBL chunk from the signature.

  * Add attribute 'apply_firewall_settings_full' to execute chunk.

  * Add bxlr feature to exec chunk
 

v0.0.12

  * add support for secure boot and license handling for netX 4000

  * add support for secure boot for netX 90

  * add new public netX names for all tools

  * remove temporary file .sniplib.dblite

  * include license information

v0.0.11

netX 90 APP image compiler:

  * Add command line argument to specify the chip type.
  
  * Rename argument --sdsize to --sdram_split_offset. 
    New default value is 0 (i.e. SDRAM exclusive to APP CPU). 
  
  * Allow building an empty dummy image by passing a "," as the segment list. 
    When there is no data for an image, the header will be written anyway.
  
  * Do not build a boot image if its output file name has been omitted from 
    the command line or an empty string is passed.
  
  * Keep track of segments in the ELF file containing data and which ones have
    been output to a boot image.
  
  * Set the destination address in the boot header if the address is in the SDRAM. 
    Otherwise, set it to 0.
  
netX 4000 HBoot image compiler:

  * Allow building execute CA9 chunks with both target addresses set to 0 to enable 
    JTAG debugging.

v0.0.10

  * Add support for the chip type netx 90 Rev.1 (NETX90B)
  
  * Add netx90_app_image.py, allowing to build multi-part boot images for the netx 90 APP CPU.
  
  * Add data type String to Concat node.
  

v0.0.9

  * Add flash device and offset information to boot header (optional).

  * Improved error message when call to objdump/objcopy/readelf fails.

  * Support Firewall settings for netx 90 Full.
  

v0.0.8

  * Support REGI chunk for netx 90 Full.

  * Fix "Exec" chunk for netX90 MPW.
    The netX90 introduced an additional DWORD in the "Exec" chunk which was erroneously added for the MPW.


v0.0.7

  * Support file aliases in "skip" chunks.

  * Add all chunks for the netX90 FULL.

  * Separate data items with comma.

  * Remove the obsolete netx90 MPW APP support.

  * Add an image type for alternative images on netX90, netX4000 and netX4100.

  * Add the address of the netX4000 "portcontrol_init" as "apply_port_control".

  * Read contents for a "Skip" chunk from an ELF file.


v0.0.6

  * Add "SkipIncomplete" tag.

  * Search the start symbol in the symbol table first and use the file header as a fallback.

  * Ignore structure declarations from the ELF debug information.


v0.0.5

  * Support option chunks for the netX90 MPW.

  * Add the possibility to read the keys for the trust paths, license, CR7
    software and CA9 software chunks from a file.

  * Pass the keyrom location from the command line to the generator.

  * Use a public key for the trust paths.

  * Add support for netX4000 and netX4100.

  * Add UInt32, UInt16, UInt8 and Concat nodes to specify data blocks.


v0.0.4

  * Add a new option "-S" / "--sniplib" to specify a sniplib location.
    The option can be used multiple times to specify more than one sniplib.

  * Accept hexadecimal values for the "offset" attribute.

  * Fix the "Skip" and "XIP" chunks for non zero offsets.

  * Read the RootCert, LicenseCert, CA9Software and CR7Software chunks from a
    file, if a "File" child node is present.


v0.0.3

  * Support the SQIROM0 and SQIROM1 areas on the netX4000.

  * Add "fill" and "file" attributes to the "Skip" tag.

  * Create "Text" chunks.

  * Add the attributes "has_header" and "has_end" to control the output of the header and end marker.


v0.0.2

  * Add a "overwrite_address" attribute for data chunks from ELF sections.
    It allows to overwrite the load address of the data.

  * Add a "segments" attribute to use only the selected segments from an ELF
    file.

  * Fix the command line interpreter to accept the "NETX90_MPW_APP" for
    "--netx-type".

  * Change the extraction method of the start address from an ELF file.
    The old way extracted all symbols with the "readelf" tool and searched for
    a global symbol with the name "start".
    The new way reads the file header - again with the "readelf" tool - and
    extracts the line with the "Entry point address".


v0.0.1 (15.12.2016)

  Initial release.
